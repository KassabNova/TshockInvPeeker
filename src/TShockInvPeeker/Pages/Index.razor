@page "/"
@inject IMatToaster Toaster
@inject NavigationManager navManager
<h1>
    Welcome to InvPeeker
</h1>


<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
    <strong>Paste the string in here</strong>

    <span class="text-nowrap">
        <MatTextField @bind-Value="@MyString7" Dense="true" TextArea="true" FullWidth="true" Outlined="true" PlaceHolder="Long string inside me pls" TValue="string"></MatTextField>
    </span>
</div>

<MatButton Raised="true" Class="mdc-toast-danger" OnClick="@SubmitAsync">Submit</MatButton>

@if (items.Count < 1)
{
    <p><em>Loading... @items.Count.ToString(); </em></p>
}
else
{
    <div style="width: 100%;margin-top: 25px;">
        <table id="inv_table">

            <tbody>
                @for (int row = 0; row < 10; row++)
                {
                <tr>
                    @for (int block = 0; block < 22; block++)
                    {
                        <td>
                            <div class="item"></div>
                            <div class="item2">
                                <div class="img">
                                    <img title="" src="/Images/Items/@(items[counter].itemID.ToString() +".png") ">
                                </div>
                            </div>
                            <span class="num">@items[counter].ammount</span>
                        </td>
                        { counter++; }

                    }
                    @{if (counter == 220) counter = 0;}

                </tr>
                }
             </tbody>
        </table>
     </div>

    }

@code {

    private string _myString7;
    public int counter = 0;
    //public int row = 0;
    public Dictionary<int, string> prefixList = new Dictionary<int, string>();
    public Dictionary<int, string> itemList = new Dictionary<int, string>();
    public string pathToItemCSV = @"items.csv";
    public string pathToPrefixCSV = @"prefix.csv";
    public static List<Data.Item> items = new List<Data.Item>();
    public bool ready = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(System.IO.Directory.GetCurrentDirectory());


        using (System.IO.StreamReader reader = new System.IO.StreamReader(pathToItemCSV))
        {
            using (CsvHelper.CsvReader csv = new CsvHelper.CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture))
            {
                csv.Configuration.PrepareHeaderForMatch = (string header, int index) => header.ToLower();

                var records = csv.GetRecords<Data.ItemList>();

                foreach (var record in records)
                {
                    itemList.Add(record.ItemID, record.ItemName);
                }
            }
        }

        using (System.IO.StreamReader reader = new System.IO.StreamReader(pathToPrefixCSV))
        {
            using (CsvHelper.CsvReader csv = new CsvHelper.CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture))
            {
                csv.Configuration.PrepareHeaderForMatch = (string header, int index) => header.ToLower();

                var records = csv.GetRecords<Data.PrefixList>();

                foreach (var record in records)
                {
                    prefixList.Add(record.PrefixID, record.PrefixName);
                }
            }
        }

    }

    public string MyString7
    {
        get => _myString7;
        set
        {
            _myString7 = value;
            this.StateHasChanged();
        }
    }

    public async Task SubmitAsync()
    {
        Show(MatToastType.Warning, "Please wait while we proccess the inventory", "Loading...");

        //Starts
        items.Clear();
        _myString7 = "0~" + _myString7;
        Format(_myString7);
        ready = true;
        // navManager.NavigateTo("/inventory");
    }
    public void Format(string inventory)
    {
        //This pattern mathes the first 2 numbers before the squiggly thing (~), that's the item prefix
        //Afterwards it matches number until a comma is found, this is the item ID
        //Finally, again match numbers until the end of the string, this is the item ammount

        string pattern = "[0-9]{1,}~[0-9]+,[0-9]+";
        Regex regex = new Regex(pattern);

        // Find matches.
        MatchCollection matches = regex.Matches(inventory);
        foreach (Match match in matches)
        {
            Data.Item item = new Data.Item();
            string itemRegex = match.Value;

            string preffix = itemRegex.Split('~')[0];
            string itemID = itemRegex.Split('~')[1].Split(',')[0];
            string itemAmmount = itemRegex.Split(',')[1].Split(',')[0];

            item.itemID = ushort.Parse(itemID);
            item.prefixID = byte.Parse(preffix);
            item.ammount = ushort.Parse(itemAmmount);
            item.itemName = itemList[ushort.Parse(itemID)];
            /*if (item.prefixID != 0) */
            item.prefixName = prefixList[item.prefixID];

            items.Add(item);
        }
        foreach (TShockInvPeeker.Data.Item item in items)
        {
            Console.WriteLine($"Item ID: {item.itemID},Prefix: {item.prefixName}, Item Name: {item.itemName}, Ammount: {item.ammount}");
        }

        // Report the number of matches found.
        Console.WriteLine($"{matches.Count} matches found in inventory. Data in list: {items.Count}");
    }
    public void Show(MatToastType type, string body, string title)
    {
        Toaster.Add(body, MatToastType.Success, title, " ", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 250;
            config.VisibleStateDuration = 1500;
            config.HideTransitionDuration = 250;

            config.RequireInteraction = false;

        });
    }
}